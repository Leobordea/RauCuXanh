using RauCuXanh.Models;
using RauCuXanh.Services;
using RauCuXanh.Utils;
using Refit;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;
using XF.Material.Forms.UI.Dialogs;

namespace RauCuXanh.ViewModels
{
    public class ChangePasswordViewModel : BaseViewModel
    {
        private bool _newpasswordError = false;
        public bool NewPasswordError
        {
            get { return _newpasswordError; }
            set { SetProperty(ref _newpasswordError, value); }
        }

        private string _newpassword;
        public string NewPassword
        {
            get { return _newpassword; }
            set
            {
                SetProperty(ref _newpassword, value);
                if (!string.IsNullOrWhiteSpace(value))
                {
                    NewPasswordError = !RegexUtil.ValidatePassword().IsMatch(value);
                }
            }
        }

        private bool _newpasswordcheckError = false;
        public bool NewPasswordCheckError
        {
            get { return _newpasswordcheckError; }
            set { SetProperty(ref _newpasswordcheckError, value); }
        }

        private string _newpasswordcheck;
        public string NewPasswordCheck
        {
            get { return _newpasswordcheck; }
            set
            {
                SetProperty(ref _newpasswordcheck, value);
                if (!string.IsNullOrWhiteSpace(value))
                {
                    NewPasswordCheckError = !string.Equals(NewPassword, value);
                }
            }
        }

        private bool _oldpasswordError = false;
        public bool OldPasswordError
        {
            get { return _oldpasswordError; }
            set { SetProperty(ref _oldpasswordError, value); }
        }

        private string _oldpassword;
        public string OldPassword
        {
            get { return _oldpassword; }
            set
            {
                SetProperty(ref _oldpassword, value);
                if (!string.IsNullOrWhiteSpace(value))
                {
                    OldPasswordError = string.IsNullOrEmpty(value);
                }
            }
        }

        public Command ChangePasswordBtn { get; }

        public ChangePasswordViewModel()
        {
            Title = "Đổi mật khẩu mới";
            ChangePasswordBtn = new Command(async () => await OnChangePasswordClicked());
        }

        private async Task OnChangePasswordClicked()
        {
            if (string.IsNullOrWhiteSpace(OldPassword))
            {
                OldPasswordError = true;
            }
            try
            {
                User user = new User()
                {
                    Username = "Phucpros",
                    Password = OldPassword
                };
                var userService = RestService.For<IUserApi>(RestClient.BaseUrl);
                var response = await userService.Login(user);
                if (!response.IsSuccessStatusCode)
                {
                    OldPasswordError = true;
                }
            }
            catch (Exception ex)
            {
                await MaterialDialog.Instance.AlertAsync(message: ex.Message);
            }
            if (string.IsNullOrWhiteSpace(NewPassword))
            {
                NewPasswordError = true;
            }
            if (string.IsNullOrWhiteSpace(NewPasswordCheck))
            {
                NewPasswordCheckError = true;
            }
            if (!OldPasswordError && !NewPasswordError && !NewPasswordCheckError)
            {
                try
                {
                    User user = new User()
                    {
                        Id = userid,
                        Password = NewPassword
                    };
                    var apiClient = RestService.For<IUserApi>(RestClient.BaseUrl);
                    var response = await apiClient.ChangePassword(user);
                    if (response.IsSuccessStatusCode)
                    {
                        await MaterialDialog.Instance.SnackbarAsync(message: "Đổi mật khẩu thành công.", actionButtonText: "OK",
                                                msDuration: MaterialSnackbar.DurationShort);
                    }
                    else
                    {

                        await MaterialDialog.Instance.AlertAsync(message: response.ReasonPhrase);
                    }
                }
                catch (Exception ex)
                {
                    await MaterialDialog.Instance.AlertAsync(message: ex.Message);
                }
            }
        }
    }
}
